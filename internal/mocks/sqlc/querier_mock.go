// Code generated by mockery v2.53.5. DO NOT EDIT.

package sqlcmock

import (
	context "context"
	sqlc "kart/internal/sqlc"

	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// GetCoupon provides a mock function with given fields: ctx, code
func (_m *Querier) GetCoupon(ctx context.Context, code string) (sqlc.Coupon, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetCoupon")
	}

	var r0 sqlc.Coupon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sqlc.Coupon, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Coupon); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(sqlc.Coupon)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, id
func (_m *Querier) GetProduct(ctx context.Context, id string) (sqlc.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 sqlc.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sqlc.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByIDs provides a mock function with given fields: ctx, dollar_1
func (_m *Querier) GetProductsByIDs(ctx context.Context, dollar_1 []string) ([]sqlc.Product, error) {
	ret := _m.Called(ctx, dollar_1)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByIDs")
	}

	var r0 []sqlc.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]sqlc.Product, error)); ok {
		return rf(ctx, dollar_1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []sqlc.Product); ok {
		r0 = rf(ctx, dollar_1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, dollar_1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertOrder(ctx context.Context, arg sqlc.InsertOrderParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertOrderParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOrderItem provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertOrderItem(ctx context.Context, arg sqlc.InsertOrderItemParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertOrderItemParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOrderItems provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertOrderItems(ctx context.Context, arg sqlc.InsertOrderItemsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertOrderItemsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAllProducts provides a mock function with given fields: ctx
func (_m *Querier) ListAllProducts(ctx context.Context) ([]sqlc.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAllProducts")
	}

	var r0 []sqlc.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]sqlc.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []sqlc.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx
func (_m *Querier) ListProducts(ctx context.Context) ([]sqlc.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []sqlc.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]sqlc.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []sqlc.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TryRedeemSingleUse provides a mock function with given fields: ctx, code
func (_m *Querier) TryRedeemSingleUse(ctx context.Context, code string) (string, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for TryRedeemSingleUse")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
