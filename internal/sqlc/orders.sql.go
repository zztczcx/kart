// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const insertOrder = `-- name: InsertOrder :exec
INSERT INTO orders (id, coupon_code)
VALUES ($1, $2)
`

type InsertOrderParams struct {
	ID         string         `json:"id"`
	CouponCode sql.NullString `json:"coupon_code"`
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) error {
	_, err := q.db.ExecContext(ctx, insertOrder, arg.ID, arg.CouponCode)
	return err
}

const insertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO order_items (id, order_id, product_id, quantity)
VALUES ($1, $2, $3, $4)
`

type InsertOrderItemParams struct {
	ID        string `json:"id"`
	OrderID   string `json:"order_id"`
	ProductID string `json:"product_id"`
	Quantity  int32  `json:"quantity"`
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
	)
	return err
}

const insertOrderItems = `-- name: InsertOrderItems :exec
INSERT INTO order_items (id, order_id, product_id, quantity)
SELECT UNNEST($1::text[]), UNNEST($2::text[]), UNNEST($3::text[]), UNNEST($4::int4[])
`

type InsertOrderItemsParams struct {
	Column1 []string `json:"column_1"`
	Column2 []string `json:"column_2"`
	Column3 []string `json:"column_3"`
	Column4 []int32  `json:"column_4"`
}

func (q *Queries) InsertOrderItems(ctx context.Context, arg InsertOrderItemsParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderItems,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
	)
	return err
}
